PROGRAM - 11
===========================================================================================
class Solution {
    public int maxArea(int[] height) {
        int left = 0;
        int right = height.length - 1;
        int maxarea = 0;

        while (left < right) {
            int h = Math.min(height[left], height[right]);
            int w = right - left;
            int area = h * w;
            maxarea = Math.max(maxarea, area);

            if (height[left] < height[right]) {
                left++;
            } else {
                right--;
            }
        }

        return maxarea;
    }
}

==========================================================================================================
PROGRAM - 26
==========================================================================================================
class Solution {
    public int removeDuplicates(int[] nums) {       
        if (nums.length == 0) {
            return 0;
        }        
        int uniqueIndex = 1;      
        for (int i = 1; i < nums.length; i++) {            
            if (nums[i] != nums[uniqueIndex - 1]) {
                nums[uniqueIndex] = nums[i]; 
                uniqueIndex++;              
            }
        }
        return uniqueIndex;
    }
}

==========================================================================================================
PROGRAM - 27
==========================================================================================================
class Solution {
    public int removeElement(int[] nums, int val) {
        int index = 0;        
        for (int i = 0; i < nums.length; i++) {            
            if (nums[i] != val) {
                nums[index] = nums[i];
                index++;
            }
        }
        return index;
    }
}

==========================================================================================================
PROGRAM - 35
==========================================================================================================
class Solution {
    public int searchInsert(int[] nums, int target) {
        int left = 0;
        int right = nums.length - 1;

        while (left <= right) {
            int mid = left + (right - left) / 2;

            if (nums[mid] == target) {
                return mid;
            } else if (nums[mid] < target) {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }

        return left;
    }
}


